
// The top-level Verilog file for eecs301_lab1
// This code was initially generated by Terasic System Builder

module eecs301_lab1(

         //////////// ADC //////////
         output ADC_CONVST,
         output ADC_DIN,
         input ADC_DOUT,
         output ADC_SCLK,

         //////////// CLOCK //////////
         input CLOCK_50,
         input CLOCK2_50,
         input CLOCK3_50,
         input CLOCK4_50,

         //////////// SEG7 //////////
         output [ 6: 0 ] HEX0,
         output [ 6: 0 ] HEX1,
         output [ 6: 0 ] HEX2,
         output [ 6: 0 ] HEX3,
         output [ 6: 0 ] HEX4,
         output [ 6: 0 ] HEX5,

         //////////// KEY //////////
         input [ 3: 0 ] KEY,

         //////////// LED //////////
         output [ 9: 0 ] LEDR,

         //////////// SW //////////
         input [ 9: 0 ] SW,

         //////////// VGA //////////
         output [ 7: 0 ] VGA_B,
         output VGA_BLANK_N,
         output VGA_CLK,
         output [ 7: 0 ] VGA_G,
         output VGA_HS,
         output [ 7: 0 ] VGA_R,
         output VGA_SYNC_N,
         output VGA_VS,

         //////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
         inout [ 35: 0 ] GPIO_0,

         //////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
         inout [ 35: 0 ] GPIO_1
       );

//=======================================================
//  REG/WIRE declarations
//=======================================================

// Wires for the clock and error signal
wire clock, error;
// Wires for the left and right signals from the turn signal module
wire [2:0] l_signal, r_signal;

//=======================================================
//  Structural coding
//=======================================================

// Assignments for the hex displays
assign HEX0[3] = ~clock;
assign HEX0[6:4] = 3'b111;
assign HEX0[2:0] = 3'b111;
assign HEX1[6:0] = 7'b1111111;
assign HEX3[6:0] = 7'b1111111;
assign HEX4[6:0] = 7'b1111111;
assign HEX5[6:0] = 7'b1111111;

// Modules
// SW[0] right, SW[1] left, KEY[2] brake
// LEDR[9:7] left, LEDR[2:0] right, LEDR[5:4] center
clk_divider(CLOCK_50, 0, clock);
turn_signal(clock, SW[1], SW[0], l_signal, r_signal, error);
brake_light(clock, ~KEY[2], l_signal, r_signal, LEDR[9:7], LEDR[5:4], LEDR[2:0]);
light_controller(clock, error, HEX2[6:0]);

endmodule